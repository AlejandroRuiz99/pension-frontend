"""
üè¢ Frontend para API de Bases de Cotizaci√≥n
Aplicaci√≥n Streamlit moderna y funcional
"""

import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime
import time
import io
import sys
import argparse
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Simulador de Pensiones",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL de la API
API_BASE_URL = "https://pension-bases-api-e707c1384c99.herokuapp.com"

# CSS personalizado para un dise√±o moderno
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
    }
    
    .feature-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 4px solid #667eea;
    }
    
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .error-box {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        transition: all 0.3s;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    
    .download-btn {
        background: #28a745 !important;
    }
    
    .excel-btn {
        background: linear-gradient(90deg, #28a745 0%, #20c997 100%) !important;
    }
    
    .debug-btn {
        background: linear-gradient(90deg, #6c757d 0%, #495057 100%) !important;
        font-size: 0.9em !important;
    }
</style>
""", unsafe_allow_html=True)

# Funciones para interactuar con la API
def check_api_health():
    """Verificar el estado de la API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        return response.status_code == 200, response.json() if response.status_code == 200 else None
    except Exception as e:
        return False, str(e)

def extract_bases(file):
    """Extraer bases de cotizaci√≥n de un PDF"""
    try:
        files = {"file": file}
        response = requests.post(f"{API_BASE_URL}/api/extract", files=files, timeout=60)
        return response.status_code == 200, response.json()
    except Exception as e:
        return False, {"error": str(e)}

def process_complete(file, fecha_jubilacion, regimen_acceso, sexo):
    """Procesar PDF completo (extraer + simular)"""
    try:
        files = {"file": file}
        data = {
            "fecha_jubilacion": fecha_jubilacion,
            "regimen_acceso": regimen_acceso,
            "sexo": sexo
        }
        response = requests.post(f"{API_BASE_URL}/api/process", files=files, data=data, timeout=120)
        return response.status_code == 200, response.json()
    except Exception as e:
        return False, {"error": str(e)}

def get_configuration():
    """Obtener configuraci√≥n de la API"""
    try:
        # Obtener todas las configuraciones
        configs = {}
        
        # Par√°metros de c√≥mputo
        response = requests.get(f"{API_BASE_URL}/api/config/parametros", timeout=10)
        if response.status_code == 200:
            configs["parametros"] = response.json()
        
        # √çndices de revalorizaci√≥n
        response = requests.get(f"{API_BASE_URL}/api/config/indices", timeout=10)
        if response.status_code == 200:
            configs["indices"] = response.json()
        
        # Topes de cotizaci√≥n
        response = requests.get(f"{API_BASE_URL}/api/config/topes", timeout=10)
        if response.status_code == 200:
            configs["topes"] = response.json()
        
        return True, configs
    except Exception as e:
        return False, {"error": str(e)}

def generate_excel_from_process_result(result_data):
    """
    Genera un archivo Excel con m√∫ltiples pesta√±as a partir del resultado del procesamiento
    """
    try:
        # Crear workbook
        wb = Workbook()
        
        # Estilos
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # Eliminar hoja por defecto
        wb.remove(wb.active)
        
        # =================== PESTA√ëA 1: BASES REVALORIZADAS ===================
        ws_revalorizadas = wb.create_sheet("Bases Revalorizadas")
        
        # Filtrar bases revalorizadas
        bases_revalorizadas = [
            base for base in result_data.get("bases_procesadas", [])
            if base.get("periodo") == "revalorizado"
        ]
        
        # Headers para bases revalorizadas
        headers_revalorizadas = ["Mes/A√±o", "Base ‚Ç¨", "Base Original ‚Ç¨", "√çndice", "Empresa", "R√©gimen", "D√≠as Cotizados"]
        
        # Escribir headers
        for col, header in enumerate(headers_revalorizadas, 1):
            cell = ws_revalorizadas.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.border = border
        
        # Escribir datos de bases revalorizadas
        for row, base in enumerate(bases_revalorizadas, 2):
            ws_revalorizadas.cell(row=row, column=1, value=base.get("mes_anyo", ""))
            ws_revalorizadas.cell(row=row, column=2, value=base.get("base", 0))
            ws_revalorizadas.cell(row=row, column=3, value=base.get("base_original", 0))
            ws_revalorizadas.cell(row=row, column=4, value=base.get("indice_revalorizacion", 1))
            ws_revalorizadas.cell(row=row, column=5, value=base.get("empresa", ""))
            ws_revalorizadas.cell(row=row, column=6, value=base.get("regimen", ""))
            ws_revalorizadas.cell(row=row, column=7, value=30)  # D√≠as cotizados
            
            # Aplicar bordes
            for col in range(1, 8):
                ws_revalorizadas.cell(row=row, column=col).border = border
        
        # F√≥rmulas para sumas totales
        if bases_revalorizadas:
            suma_row = len(bases_revalorizadas) + 3
            ws_revalorizadas.cell(row=suma_row, column=1, value="SUMA TOTAL REVALORIZADAS:")
            ws_revalorizadas.cell(row=suma_row, column=1).font = Font(bold=True)
            ws_revalorizadas.cell(row=suma_row, column=2, value=f"=SUM(B2:B{len(bases_revalorizadas)+1})")
            ws_revalorizadas.cell(row=suma_row, column=2).font = Font(bold=True)
            ws_revalorizadas.cell(row=suma_row, column=2).fill = PatternFill(start_color="E2EFDA", end_color="E2EFDA", fill_type="solid")
            
            # Suma de d√≠as cotizados totales
            ws_revalorizadas.cell(row=suma_row, column=6, value="TOTAL D√çAS:")
            ws_revalorizadas.cell(row=suma_row, column=6).font = Font(bold=True)
            ws_revalorizadas.cell(row=suma_row, column=7, value=f"=SUM(G2:G{len(bases_revalorizadas)+1})")
            ws_revalorizadas.cell(row=suma_row, column=7).font = Font(bold=True)
            ws_revalorizadas.cell(row=suma_row, column=7).fill = PatternFill(start_color="E2EFDA", end_color="E2EFDA", fill_type="solid")
            
            # Suma de d√≠as cotizados √öLTIMOS 13 A√ëOS (156 meses m√°s recientes)
            ws_revalorizadas.cell(row=suma_row+1, column=6, value="√öLTIMOS 13 A√ëOS:")
            ws_revalorizadas.cell(row=suma_row+1, column=6).font = Font(bold=True)
            
            # Calcular los √∫ltimos 156 meses (13 a√±os √ó 12 meses)
            total_bases = len(bases_revalorizadas)
            if total_bases >= 156:
                # Sumar solo los 156 m√°s recientes (desde fila 2 hasta fila 157)
                ws_revalorizadas.cell(row=suma_row+1, column=7, value=f"=SUM(G2:G157)")
            else:
                # Si hay menos de 156 bases, sumar todas
                ws_revalorizadas.cell(row=suma_row+1, column=7, value=f"=SUM(G2:G{total_bases+1})")
            
            ws_revalorizadas.cell(row=suma_row+1, column=7).font = Font(bold=True)
            ws_revalorizadas.cell(row=suma_row+1, column=7).fill = PatternFill(start_color="FFE6CC", end_color="FFE6CC", fill_type="solid")
        
        # Ajustar ancho de columnas
        for column in ws_revalorizadas.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 30)
            ws_revalorizadas.column_dimensions[column_letter].width = adjusted_width
        
        # =================== PESTA√ëA 2: BASES NO REVALORIZADAS ===================
        ws_no_revalorizadas = wb.create_sheet("Bases No Revalorizadas")
        
        # Filtrar bases no revalorizadas
        bases_no_revalorizadas = [
            base for base in result_data.get("bases_procesadas", [])
            if base.get("periodo") == "no_revalorizado"
        ]
        
        # Headers para bases no revalorizadas
        headers_no_revalorizadas = ["Mes/A√±o", "Base ‚Ç¨", "Empresa", "R√©gimen", "D√≠as Cotizados"]
        
        # Escribir headers
        for col, header in enumerate(headers_no_revalorizadas, 1):
            cell = ws_no_revalorizadas.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.border = border
        
        # Escribir datos de bases no revalorizadas
        for row, base in enumerate(bases_no_revalorizadas, 2):
            ws_no_revalorizadas.cell(row=row, column=1, value=base.get("mes_anyo", ""))
            ws_no_revalorizadas.cell(row=row, column=2, value=base.get("base", 0))
            ws_no_revalorizadas.cell(row=row, column=3, value=base.get("empresa", ""))
            ws_no_revalorizadas.cell(row=row, column=4, value=base.get("regimen", ""))
            ws_no_revalorizadas.cell(row=row, column=5, value=30)  # D√≠as cotizados
            
            # Aplicar bordes
            for col in range(1, 6):
                ws_no_revalorizadas.cell(row=row, column=col).border = border
        
        # F√≥rmulas para sumas totales
        if bases_no_revalorizadas:
            suma_row = len(bases_no_revalorizadas) + 3
            ws_no_revalorizadas.cell(row=suma_row, column=1, value="SUMA TOTAL NO REVALORIZADAS:")
            ws_no_revalorizadas.cell(row=suma_row, column=1).font = Font(bold=True)
            ws_no_revalorizadas.cell(row=suma_row, column=2, value=f"=SUM(B2:B{len(bases_no_revalorizadas)+1})")
            ws_no_revalorizadas.cell(row=suma_row, column=2).font = Font(bold=True)
            ws_no_revalorizadas.cell(row=suma_row, column=2).fill = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid")
            
            # Suma de d√≠as cotizados
            ws_no_revalorizadas.cell(row=suma_row, column=4, value="TOTAL D√çAS:")
            ws_no_revalorizadas.cell(row=suma_row, column=4).font = Font(bold=True)
            ws_no_revalorizadas.cell(row=suma_row, column=5, value=f"=SUM(E2:E{len(bases_no_revalorizadas)+1})")
            ws_no_revalorizadas.cell(row=suma_row, column=5).font = Font(bold=True)
            ws_no_revalorizadas.cell(row=suma_row, column=5).fill = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid")
        
        # Ajustar ancho de columnas
        for column in ws_no_revalorizadas.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 30)
            ws_no_revalorizadas.column_dimensions[column_letter].width = adjusted_width
        
        # =================== PESTA√ëA 3: RESUMEN Y C√ÅLCULOS ===================
        ws_resumen = wb.create_sheet("Resumen y C√°lculos")
        
        # Informaci√≥n general
        ws_resumen.cell(row=1, column=1, value="RESUMEN DEL C√ÅLCULO DE BASE REGULADORA")
        ws_resumen.cell(row=1, column=1).font = Font(bold=True, size=14)
        ws_resumen.merge_cells('A1:D1')
        
        # Datos principales
        row_counter = 3
        
        # Informaci√≥n del expediente
        ws_resumen.cell(row=row_counter, column=1, value="DATOS DEL EXPEDIENTE")
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=1).fill = PatternFill(start_color="D9EAD3", end_color="D9EAD3", fill_type="solid")
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Fecha de Jubilaci√≥n:")
        ws_resumen.cell(row=row_counter, column=2, value=result_data.get("fecha_jubilacion", ""))
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="R√©gimen de Acceso:")
        ws_resumen.cell(row=row_counter, column=2, value=result_data.get("regimen_acceso", ""))
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Sexo:")
        ws_resumen.cell(row=row_counter, column=2, value=result_data.get("sexo", ""))
        row_counter += 2
        
        # Estad√≠sticas
        estadisticas = result_data.get("estadisticas", {})
        
        ws_resumen.cell(row=row_counter, column=1, value="ESTAD√çSTICAS DE BASES")
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=1).fill = PatternFill(start_color="FCE5CD", end_color="FCE5CD", fill_type="solid")
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Total de Bases:")
        ws_resumen.cell(row=row_counter, column=2, value=estadisticas.get("total_bases", 0))
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Bases Revalorizadas:")
        ws_resumen.cell(row=row_counter, column=2, value=estadisticas.get("bases_revalorizadas", 0))
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Bases No Revalorizadas:")
        ws_resumen.cell(row=row_counter, column=2, value=estadisticas.get("bases_no_revalorizadas", 0))
        row_counter += 2
        
        # C√°lculos - usar valores calculados para evitar problemas de f√≥rmulas
        ws_resumen.cell(row=row_counter, column=1, value="C√ÅLCULOS DE SUMAS")
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=1).fill = PatternFill(start_color="E1D5E7", end_color="E1D5E7", fill_type="solid")
        row_counter += 1
        
        # Crear referencias din√°micas a las sumas de las otras hojas
        ws_resumen.cell(row=row_counter, column=1, value="Suma Bases Revalorizadas:")
        if bases_revalorizadas:
            # Referencias din√°micas a la suma total de la hoja "Bases Revalorizadas"
            suma_rev_row_destino = len(bases_revalorizadas) + 3
            ws_resumen.cell(row=row_counter, column=2, value=f"='Bases Revalorizadas'!B{suma_rev_row_destino}")
        else:
            ws_resumen.cell(row=row_counter, column=2, value=0)
        suma_rev_row = row_counter  # Guardar referencia para f√≥rmula
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Suma Bases No Revalorizadas:")
        if bases_no_revalorizadas:
            # Referencias din√°micas a la suma total de la hoja "Bases No Revalorizadas"
            suma_no_rev_row_destino = len(bases_no_revalorizadas) + 3
            ws_resumen.cell(row=row_counter, column=2, value=f"='Bases No Revalorizadas'!B{suma_no_rev_row_destino}")
        else:
            ws_resumen.cell(row=row_counter, column=2, value=0)
        suma_no_rev_row = row_counter  # Guardar referencia para f√≥rmula
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="SUMA TOTAL:")
        ws_resumen.cell(row=row_counter, column=2, value=f"=B{suma_rev_row}+B{suma_no_rev_row}")
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=2).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=2).fill = PatternFill(start_color="C9DAF8", end_color="C9DAF8", fill_type="solid")
        suma_total_row = row_counter  # Guardar referencia para la base reguladora
        row_counter += 2
        
        # D√çAS COTIZADOS √öLTIMOS 15 A√ëOS
        ws_resumen.cell(row=row_counter, column=1, value="D√çAS COTIZADOS √öLTIMOS 15 A√ëOS:")
        
        # Nueva l√≥gica: Todas las no revalorizadas + √∫ltimos 13 a√±os de revalorizadas
        if bases_revalorizadas and bases_no_revalorizadas:
            # F√≥rmula din√°mica: suma de no revalorizadas + √∫ltimos 13 a√±os de revalorizadas
            suma_no_rev_row = len(bases_no_revalorizadas) + 3
            suma_13_anos_row = len(bases_revalorizadas) + 4  # +4 porque est√° en la segunda fila de totales
            formula_15_anos = f"='Bases No Revalorizadas'!E{suma_no_rev_row}+'Bases Revalorizadas'!G{suma_13_anos_row}"
            ws_resumen.cell(row=row_counter, column=2, value=formula_15_anos)
            ws_resumen.cell(row=row_counter, column=3, value="(2 a√±os no rev + 13 a√±os rev)")
            
        elif bases_no_revalorizadas:
            # Solo no revalorizadas
            suma_no_rev_row = len(bases_no_revalorizadas) + 3
            ws_resumen.cell(row=row_counter, column=2, value=f"='Bases No Revalorizadas'!E{suma_no_rev_row}")
            ws_resumen.cell(row=row_counter, column=3, value="(solo no revalorizadas)")
            
        elif bases_revalorizadas:
            # Solo revalorizadas - tomar √∫ltimos 13 a√±os
            suma_13_anos_row = len(bases_revalorizadas) + 4
            ws_resumen.cell(row=row_counter, column=2, value=f"='Bases Revalorizadas'!G{suma_13_anos_row}")
            ws_resumen.cell(row=row_counter, column=3, value="(solo √∫ltimos 13 a√±os rev)")
            
        else:
            # Sin datos
            ws_resumen.cell(row=row_counter, column=2, value=0)
            ws_resumen.cell(row=row_counter, column=3, value="(sin datos)")
            
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=2).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=2).fill = PatternFill(start_color="D5E8D4", end_color="D5E8D4", fill_type="solid")
        dias_15_anos_row = row_counter  # Guardar referencia si se necesita
        row_counter += 2
        
        # Par√°metros de c√≥mputo
        parametros = result_data.get("parametros_computo", {})
        
        ws_resumen.cell(row=row_counter, column=1, value="PAR√ÅMETROS DE C√ìMPUTO")
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True)
        ws_resumen.cell(row=row_counter, column=1).fill = PatternFill(start_color="F4CCCC", end_color="F4CCCC", fill_type="solid")
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Bases Incluidas:")
        ws_resumen.cell(row=row_counter, column=2, value=parametros.get("bases_incluidas", 0))
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Per√≠odo (meses):")
        ws_resumen.cell(row=row_counter, column=2, value=parametros.get("periodo_meses", 0))
        row_counter += 1
        
        ws_resumen.cell(row=row_counter, column=1, value="Divisor Base Reguladora:")
        ws_resumen.cell(row=row_counter, column=2, value=parametros.get("divisor_base_reguladora", 0))
        row_counter += 2
        
        # BASE REGULADORA FINAL
        ws_resumen.cell(row=row_counter, column=1, value="BASE REGULADORA:")
        divisor_cell = f"B{row_counter-2}"     # Referencia al divisor (dos filas arriba)
        ws_resumen.cell(row=row_counter, column=2, value=f"=B{suma_total_row}/{divisor_cell}")
        
        # Estilo especial para la base reguladora
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True, size=12)
        ws_resumen.cell(row=row_counter, column=2).font = Font(bold=True, size=12)
        ws_resumen.cell(row=row_counter, column=1).fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")
        ws_resumen.cell(row=row_counter, column=2).fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")
        ws_resumen.cell(row=row_counter, column=1).font = Font(bold=True, size=12, color="FFFFFF")
        ws_resumen.cell(row=row_counter, column=2).font = Font(bold=True, size=12, color="FFFFFF")
        
        # Ajustar ancho de columnas del resumen
        ws_resumen.column_dimensions['A'].width = 30
        ws_resumen.column_dimensions['B'].width = 20
        ws_resumen.column_dimensions['C'].width = 25
        
        # Crear buffer en memoria
        excel_buffer = io.BytesIO()
        wb.save(excel_buffer)
        excel_buffer.seek(0)
        
        return excel_buffer.getvalue()
        
    except Exception as e:
        st.error(f"Error generando Excel: {str(e)}")
        return None

# Header principal
st.markdown("""
<div class="main-header">
    <h1>Simulador de Pensiones</h1>
    <p>Extracci√≥n y c√°lculo de bases reguladoras profesional</p>
</div>
""", unsafe_allow_html=True)

# Verificar estado de la API
with st.sidebar:
    st.header("üîó Estado de la API")
    
    if st.button("üîÑ Verificar Conexi√≥n"):
        with st.spinner("Verificando conexi√≥n..."):
            is_healthy, health_data = check_api_health()
        
        if is_healthy:
            st.success("‚úÖ API conectada correctamente")
            if health_data:
                st.json(health_data.get("services", {}))
        else:
            st.error("‚ùå Error de conexi√≥n con la API")
            if health_data:
                st.error(health_data)

# Navegaci√≥n principal
st.sidebar.markdown("---")
option = st.sidebar.selectbox(
    "üéõÔ∏è Selecciona una opci√≥n:",
    ["üè† Inicio", "üìÑ Extraer Bases", "üöÄ Procesar Completo", "‚öôÔ∏è Configuraci√≥n"]
)

# P√°gina de inicio
if option == "üè† Inicio":
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <h3>üìÑ Extracci√≥n</h3>
            <p>Sube un archivo PDF y extrae autom√°ticamente las bases de cotizaci√≥n.</p>
            <ul>
                <li>Identifica empresas y reg√≠menes</li>
                <li>Valida datos autom√°ticamente</li>
                <li>Descarga resultados en JSON</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <h3>üöÄ Procesamiento Completo</h3>
            <p>Extrae bases y calcula la base reguladora en un solo paso.</p>
            <ul>
                <li>Simulaci√≥n de per√≠odos futuros</li>
                <li>Aplicaci√≥n de revalorizaci√≥n</li>
                <li>C√°lculo de base reguladora</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card">
            <h3>‚öôÔ∏è Configuraci√≥n</h3>
            <p>Consulta los par√°metros de c√°lculo actualizados.</p>
            <ul>
                <li>√çndices de revalorizaci√≥n</li>
                <li>Topes de cotizaci√≥n</li>
                <li>Par√°metros de c√≥mputo</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

# P√°gina de extracci√≥n
elif option == "üìÑ Extraer Bases":
    st.header("üìÑ Extracci√≥n de Bases de Cotizaci√≥n")
    
    st.markdown("""
    <div class="feature-card">
        <p>Sube un archivo PDF con bases de cotizaci√≥n de la Seguridad Social y obt√©n los datos estructurados autom√°ticamente.</p>
    </div>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        "Selecciona un archivo PDF",
        type=['pdf'],
        help="Archivo PDF con bases de cotizaci√≥n de la Seguridad Social (m√°ximo 10MB)"
    )
    
    if uploaded_file is not None:
        # Mostrar informaci√≥n del archivo
        st.info(f"üìÅ Archivo: {uploaded_file.name} ({uploaded_file.size / 1024:.1f} KB)")
        
        if st.button("üîç Extraer Bases", key="extract"):
            if uploaded_file.size > 10 * 1024 * 1024:  # 10MB
                st.error("‚ùå El archivo es demasiado grande. M√°ximo 10MB.")
            else:
                with st.spinner("Extrayendo bases de cotizaci√≥n..."):
                    success, result = extract_bases(uploaded_file)
                
                if success:
                    st.markdown("""
                    <div class="success-box">
                        ‚úÖ <strong>Extracci√≥n completada exitosamente</strong>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Mostrar estad√≠sticas
                    if "total_bases" in result:
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Total Bases", result["total_bases"])
                        with col2:
                            st.metric("Empresas", result.get("metadata", {}).get("total_empresas", "N/A"))
                        with col3:
                            periodo = result.get("metadata", {}).get("periodo_bases", {})
                            if periodo:
                                st.metric("Per√≠odo", f"{periodo.get('desde', '')} - {periodo.get('hasta', '')}")
                    
                    # Bot√≥n de descarga
                    json_data = json.dumps(result, indent=2, ensure_ascii=False)
                    st.download_button(
                        label="üì• Descargar Resultados (JSON)",
                        data=json_data,
                        file_name=f"bases_extraidas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json",
                        key="download_extract"
                    )
                else:
                    st.markdown(f"""
                    <div class="error-box">
                        ‚ùå <strong>Error en la extracci√≥n:</strong><br>
                        {result.get('error', result.get('detail', 'Error desconocido'))}
                    </div>
                    """, unsafe_allow_html=True)

# P√°gina de procesamiento completo
elif option == "üöÄ Procesar Completo":
    st.header("üöÄ Procesamiento Completo")
    
    st.markdown("""
    <div class="feature-card">
        <p>Proceso completo en un solo paso: extrae bases del PDF y calcula autom√°ticamente la base reguladora.</p>
    </div>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        "Selecciona un archivo PDF",
        type=['pdf'],
        help="Archivo PDF con bases de cotizaci√≥n de la Seguridad Social (m√°ximo 10MB)",
        key="process_file"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        fecha_jubilacion = st.text_input(
            "üìÖ Fecha de Jubilaci√≥n",
            placeholder="MM/YYYY",
            help="Formato: MM/YYYY (ejemplo: 06/2025)"
        )
        
        regimen_acceso = st.selectbox(
            "‚öôÔ∏è R√©gimen de Acceso",
            ["GENERAL", "AUTONOMO"],
            help="R√©gimen de cotizaci√≥n"
        )
    
    with col2:
        sexo = st.selectbox(
            "üë§ Sexo del Cotizante",
            ["MASCULINO", "FEMENINO"],
            help="Necesario para el c√°lculo correcto de lagunas"
        )
    
    if uploaded_file is not None and fecha_jubilacion:
        # Validar formato de fecha
        import re
        if not re.match(r'^\d{2}/\d{4}$', fecha_jubilacion):
            st.error("‚ùå Formato de fecha incorrecto. Use MM/YYYY")
        else:
            st.info(f"üìÅ Archivo: {uploaded_file.name} ({uploaded_file.size / 1024:.1f} KB)")
            
            if st.button("üöÄ Procesar Completo", key="process"):
                if uploaded_file.size > 10 * 1024 * 1024:  # 10MB
                    st.error("‚ùå El archivo es demasiado grande. M√°ximo 10MB.")
                else:
                    with st.spinner("Procesando archivo completo... Esto puede tomar unos minutos."):
                        success, result = process_complete(uploaded_file, fecha_jubilacion, regimen_acceso, sexo)
                    
                    if success:
                        st.markdown("""
                        <div class="success-box">
                            ‚úÖ <strong>Procesamiento completado exitosamente</strong>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Mostrar resultados principales
                        if "estadisticas" in result:
                            stats = result["estadisticas"]
                            
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("Total Bases", stats.get("total_bases", "N/A"))
                            with col2:
                                st.metric("Base Reguladora", f"‚Ç¨{stats.get('base_reguladora', 0):.2f}")
                            with col3:
                                st.metric("Suma Total", f"‚Ç¨{stats.get('suma_total', 0):.2f}")
                            with col4:
                                st.metric("C√°lculo Usado", result.get("calculo_elegido", "N/A"))
                        
                        # Informaci√≥n adicional
                        st.subheader("üìä Detalles del Procesamiento")
                        info_col1, info_col2 = st.columns(2)
                        
                        with info_col1:
                            st.write(f"**Fecha de Jubilaci√≥n:** {result.get('fecha_jubilacion', 'N/A')}")
                            st.write(f"**R√©gimen:** {result.get('regimen_acceso', 'N/A')}")
                            st.write(f"**Sexo:** {result.get('sexo', 'N/A')}")
                        
                        with info_col2:
                            if "metadata_extraccion" in result:
                                metadata = result["metadata_extraccion"]
                                st.write(f"**Bases Extra√≠das:** {metadata.get('total_bases_extraidas', 'N/A')}")
                                st.write(f"**Empresas:** {metadata.get('total_empresas', 'N/A')}")
                                periodo = metadata.get('periodo_extraido', {})
                                if periodo:
                                    st.write(f"**Per√≠odo:** {periodo.get('desde', '')} - {periodo.get('hasta', '')}")
                        
                        # Botones de descarga
                        st.subheader("üì• Descargar Resultados")
                        
                        col_download1, col_download2 = st.columns(2)
                        
                        with col_download1:
                            # Generar Excel
                            excel_data = generate_excel_from_process_result(result)
                            if excel_data:
                                st.download_button(
                                    label="üìä Descargar Excel Editable",
                                    data=excel_data,
                                    file_name=f"bases_cotizacion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                    key="download_excel",
                                    help="Excel con pesta√±as separadas y f√≥rmulas din√°micas para edici√≥n"
                                )
                        
                        with col_download2:
                            # JSON para desarrollo
                            json_data = json.dumps(result, indent=2, ensure_ascii=False)
                            st.download_button(
                                label="üî® Descargar JSON (Debug)",
                                data=json_data,
                                file_name=f"procesamiento_completo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                                mime="application/json",
                                key="download_process",
                                help="Archivo JSON completo para desarrollo y depuraci√≥n"
                            )
                    else:
                        st.markdown(f"""
                        <div class="error-box">
                            ‚ùå <strong>Error en el procesamiento:</strong><br>
                            {result.get('error', result.get('detail', 'Error desconocido'))}
                        </div>
                        """, unsafe_allow_html=True)

# P√°gina de configuraci√≥n
elif option == "‚öôÔ∏è Configuraci√≥n":
    st.header("‚öôÔ∏è Configuraci√≥n del Sistema")
    
    st.markdown("""
    <div class="feature-card">
        <p>Consulta los par√°metros de configuraci√≥n cargados en el sistema para c√°lculos y simulaciones.</p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.button("üîÑ Cargar Configuraci√≥n"):
        with st.spinner("Cargando configuraci√≥n..."):
            success, configs = get_configuration()
        
        if success:
            st.success("‚úÖ Configuraci√≥n cargada correctamente")
            
            # Par√°metros de c√≥mputo
            if "parametros" in configs:
                st.subheader("üìä Par√°metros de C√≥mputo")
                params_data = configs["parametros"]["data"]
                
                # Verificar si ya tenemos los par√°metros directamente o est√°n anidados
                params = None
                if params_data:
                    if "parametros_computo_anual" in params_data:
                        params = params_data["parametros_computo_anual"]
                    else:
                        # Asumir que params_data ya contiene los par√°metros directamente
                        params = params_data
                
                if params and isinstance(params, dict):
                    # Convertir a DataFrame para mejor visualizaci√≥n
                    df_params = []
                    for a√±o, datos in params.items():
                        if isinstance(datos, dict):
                            df_params.append({
                                "A√±o": a√±o,
                                "Bases Incluidas": datos.get("bases_incluidas", datos.get("numero_bases", "N/A")),
                                "Per√≠odo (meses)": datos.get("periodo_meses", "N/A"),
                                "Divisor Base Reguladora": datos.get("divisor_base_reguladora", datos.get("divisor", "N/A"))
                            })
                    
                    if df_params:
                        # Ordenar por a√±o descendente
                        df = pd.DataFrame(df_params)
                        df = df.sort_values('A√±o', ascending=False)
                        st.dataframe(df, use_container_width=True, hide_index=True)
                        
                        # Mostrar informaci√≥n adicional en columnas
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Total A√±os", len(df_params))
                        with col2:
                            √∫ltimo_a√±o = max(params.keys())
                            st.metric("√öltimo A√±o", √∫ltimo_a√±o)
                        with col3:
                            if df_params:
                                primer_a√±o = min(params.keys())
                                st.metric("Primer A√±o", primer_a√±o)
                else:
                    st.warning("‚ö†Ô∏è No se pudieron procesar los par√°metros de c√≥mputo")
                    if params_data:
                        st.info("Los datos est√°n disponibles pero en un formato no reconocido.")
            
            # √çndices de revalorizaci√≥n
            if "indices" in configs:
                st.subheader("üìà √çndices de Revalorizaci√≥n")
                indices_data = configs["indices"]["data"]
                
                # Verificar si ya tenemos los √≠ndices directamente o est√°n anidados
                indices = None
                if indices_data:
                    if "indices_revalorizacion" in indices_data:
                        indices = indices_data["indices_revalorizacion"]
                    else:
                        # Asumir que indices_data ya contiene los √≠ndices directamente
                        indices = indices_data
                
                if indices and isinstance(indices, dict):
                    # Mostrar informaci√≥n resumida
                    total_indices = len(indices)
                    fechas = list(indices.keys())
                    if fechas:
                        desde = min(fechas)
                        hasta = max(fechas)
                        
                        # M√©tricas principales
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Total √çndices", total_indices)
                        with col2:
                            st.metric("Desde", desde)
                        with col3:
                            st.metric("Hasta", hasta)
                    
                    # Mostrar todos los √≠ndices ordenados por fecha
                    def sort_key(fecha):
                        """Funci√≥n para ordenar fechas MM/YYYY correctamente"""
                        try:
                            mes, a√±o = fecha.split('/')
                            return (int(a√±o), int(mes))
                        except:
                            return (0, 0)
                    
                    sorted_dates = sorted(indices.keys(), key=sort_key, reverse=True)
                    
                    df_indices = []
                    for fecha in sorted_dates:
                        indice = indices[fecha]
                        df_indices.append({
                            "Fecha (MM/YYYY)": fecha,
                            "√çndice de Revalorizaci√≥n": f"{indice:.6f}"
                        })
                    
                    if df_indices:
                        st.write(f"**üìä Todos los √≠ndices de revalorizaci√≥n ({len(df_indices)} registros):**")
                        df = pd.DataFrame(df_indices)
                        
                        # Mostrar tabla con altura fija para scroll
                        st.dataframe(df, use_container_width=True, hide_index=True, height=400)
                        
                        # Estad√≠sticas b√°sicas
                        valores = list(indices.values())
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("√çndice Promedio", f"{sum(valores)/len(valores):.6f}")
                        with col2:
                            st.metric("√çndice M√°ximo", f"{max(valores):.6f}")
                        with col3:
                            st.metric("√çndice M√≠nimo", f"{min(valores):.6f}")
                        
                        # Informaci√≥n del √∫ltimo √≠ndice disponible
                        ultimo_fecha = sorted_dates[0]
                        ultimo_indice = indices[ultimo_fecha]
                        st.info(f"üìÖ **√öltimo √≠ndice disponible**: {ultimo_fecha} - Valor: {ultimo_indice:.6f}")
                else:
                    st.warning("‚ö†Ô∏è No se pudieron procesar los √≠ndices de revalorizaci√≥n")
                    if indices_data:
                        st.info("Los datos est√°n disponibles pero en un formato no reconocido.")
            
            # Topes de cotizaci√≥n
            if "topes" in configs:
                st.subheader("üí∞ Topes de Cotizaci√≥n")
                topes_data = configs["topes"]["data"]
                
                # Verificar si ya tenemos los topes directamente o est√°n anidados
                topes = None
                if topes_data:
                    if "topes_cotizacion" in topes_data:
                        topes = topes_data["topes_cotizacion"]
                    else:
                        # Asumir que topes_data ya contiene los topes directamente
                        topes = topes_data
                
                if topes and isinstance(topes, dict):
                    df_topes = []
                    for a√±o, datos in topes.items():
                        if isinstance(datos, dict):
                            base_min = datos.get('base_minima_mensual', 0)
                            base_max = datos.get('base_maxima_mensual', 0)
                            df_topes.append({
                                "A√±o": a√±o,
                                "Base M√≠nima Mensual": f"‚Ç¨{base_min:.2f}",
                                "Base M√°xima Mensual": f"‚Ç¨{base_max:.2f}",
                                "Diferencia": f"‚Ç¨{base_max - base_min:.2f}"
                            })
                    
                    if df_topes:
                        # Ordenar por a√±o descendente
                        df = pd.DataFrame(df_topes)
                        df = df.sort_values('A√±o', ascending=False)
                        st.dataframe(df, use_container_width=True, hide_index=True)
                        
                        # Mostrar m√©tricas en columnas
                        col1, col2, col3, col4 = st.columns(4)
                        
                        ultimo_a√±o = max(topes.keys())
                        ultimo_datos = topes[ultimo_a√±o]
                        
                        with col1:
                            st.metric("Total A√±os", len(df_topes))
                        with col2:
                            st.metric("√öltimo A√±o", ultimo_a√±o)
                        with col3:
                            st.metric("M√≠nima Actual", f"‚Ç¨{ultimo_datos.get('base_minima_mensual', 0):.2f}")
                        with col4:
                            st.metric("M√°xima Actual", f"‚Ç¨{ultimo_datos.get('base_maxima_mensual', 0):.2f}")
                        
                        # Informaci√≥n destacada
                        st.success(f"üéØ **Bases de cotizaci√≥n para {ultimo_a√±o}**: Desde ‚Ç¨{ultimo_datos.get('base_minima_mensual', 0):.2f} hasta ‚Ç¨{ultimo_datos.get('base_maxima_mensual', 0):.2f} mensuales")
                else:
                    st.warning("‚ö†Ô∏è No se pudieron procesar los topes de cotizaci√≥n")
                    if topes_data:
                        st.info("Los datos est√°n disponibles pero en un formato no reconocido.")
            
            # Bot√≥n para descargar toda la configuraci√≥n
            json_data = json.dumps(configs, indent=2, ensure_ascii=False)
            st.download_button(
                label="üì• Descargar Configuraci√≥n Completa (JSON)",
                data=json_data,
                file_name=f"configuracion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                key="download_config"
            )
        else:
            st.markdown(f"""
            <div class="error-box">
                ‚ùå <strong>Error cargando configuraci√≥n:</strong><br>
                {configs.get('error', 'Error desconocido')}
            </div>
            """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown(f"""
<div style="text-align: center; color: #666; padding: 1rem;">
    <p>üè¢ API Bases de Cotizaci√≥n | Desarrollado con ‚ù§Ô∏è usando Streamlit</p>
    <p>API actual: <strong>{API_BASE_URL}</strong></p>
    <p>üí° <em>Usa <code>streamlit run app.py --local</code> para conectar a API local (localhost:8000)</em></p>
</div>
""", unsafe_allow_html=True) 