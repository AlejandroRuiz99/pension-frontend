"""
M√≥dulo de p√°ginas de la aplicaci√≥n
Contiene la l√≥gica de cada p√°gina del simulador de pensiones
"""

import streamlit as st
import pandas as pd
import json
import re
from datetime import datetime

from .api_client import extract_bases, process_complete, get_configuration
from .ui_components import show_feature_card, show_success_message, show_error_message, show_info_message
from .excel_generator import generate_excel_from_process_result


def show_home_page():
    """Mostrar la p√°gina de inicio con informaci√≥n general"""
    col1, col2, col3 = st.columns(3)
    
    with col1:
        show_feature_card(
            "üìÑ Extracci√≥n",
            "Sube un archivo PDF y extrae autom√°ticamente las bases de cotizaci√≥n.",
            [
                "Identifica empresas y reg√≠menes",
                "Valida datos autom√°ticamente",
                "Descarga resultados en JSON"
            ]
        )
    
    with col2:
        show_feature_card(
            "üöÄ Procesamiento Completo",
            "Extrae bases y calcula la base reguladora en un solo paso.",
            [
                "Simulaci√≥n de per√≠odos futuros",
                "Aplicaci√≥n de revalorizaci√≥n",
                "C√°lculo de base reguladora"
            ]
        )
    
    with col3:
        show_feature_card(
            "‚öôÔ∏è Configuraci√≥n",
            "Consulta los par√°metros de c√°lculo actualizados.",
            [
                "√çndices de revalorizaci√≥n",
                "Topes de cotizaci√≥n",
                "Par√°metros de c√≥mputo"
            ]
        )


def show_extract_page():
    """Mostrar la p√°gina de extracci√≥n de bases"""
    st.header("üìÑ Extracci√≥n de Bases de Cotizaci√≥n")
    
    show_info_message(
        "Sube un archivo PDF con bases de cotizaci√≥n de la Seguridad Social y obt√©n los datos estructurados autom√°ticamente."
    )
    
    uploaded_file = st.file_uploader(
        "Selecciona un archivo PDF",
        type=['pdf'],
        help="Archivo PDF con bases de cotizaci√≥n de la Seguridad Social (m√°ximo 10MB)"
    )
    
    if uploaded_file is not None:
        st.info(f"üìÅ Archivo: {uploaded_file.name} ({uploaded_file.size / 1024:.1f} KB)")
        
        if st.button("üîç Extraer Bases", key="extract"):
            if uploaded_file.size > 10 * 1024 * 1024:  # 10MB
                show_error_message("El archivo es demasiado grande. M√°ximo 10MB.")
            else:
                with st.spinner("Extrayendo bases de cotizaci√≥n..."):
                    success, result = extract_bases(uploaded_file)
                
                if success:
                    show_success_message("Extracci√≥n completada exitosamente")
                    
                    # Mostrar estad√≠sticas
                    if "total_bases" in result:
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Total Bases", result["total_bases"])
                        with col2:
                            st.metric("Empresas", result.get("metadata", {}).get("total_empresas", "N/A"))
                        with col3:
                            periodo = result.get("metadata", {}).get("periodo_bases", {})
                            if periodo:
                                st.metric("Per√≠odo", f"{periodo.get('desde', '')} - {periodo.get('hasta', '')}")
                    
                    # Bot√≥n de descarga
                    json_data = json.dumps(result, indent=2, ensure_ascii=False)
                    st.download_button(
                        label="üì• Descargar Resultados (JSON)",
                        data=json_data,
                        file_name=f"bases_extraidas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json",
                        key="download_extract"
                    )
                else:
                    error_msg = result.get('error', result.get('detail', 'Error desconocido'))
                    show_error_message(f"Error en la extracci√≥n: {error_msg}")


def show_process_page():
    """Mostrar la p√°gina de procesamiento completo"""
    st.header("üöÄ Procesamiento Completo")
    
    show_info_message(
        "Proceso completo en un solo paso: extrae bases del PDF y calcula autom√°ticamente la base reguladora."
    )
    
    uploaded_file = st.file_uploader(
        "Selecciona un archivo PDF",
        type=['pdf'],
        help="Archivo PDF con bases de cotizaci√≥n de la Seguridad Social (m√°ximo 10MB)",
        key="process_file"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        fecha_jubilacion = st.text_input(
            "üìÖ Fecha de Jubilaci√≥n",
            placeholder="MM/YYYY",
            help="Formato: MM/YYYY (ejemplo: 06/2025)"
        )
        
        regimen_acceso = st.selectbox(
            "‚öôÔ∏è R√©gimen de Acceso",
            ["GENERAL", "AUTONOMO"],
            help="R√©gimen de cotizaci√≥n"
        )
    
    with col2:
        sexo = st.selectbox(
            "üë§ Sexo del Cotizante",
            ["MASCULINO", "FEMENINO"],
            help="Necesario para el c√°lculo correcto de lagunas"
        )
    
    if uploaded_file is not None and fecha_jubilacion:
        # Validar formato de fecha
        if not re.match(r'^\d{2}/\d{4}$', fecha_jubilacion):
            show_error_message("Formato de fecha incorrecto. Use MM/YYYY")
        else:
            st.info(f"üìÅ Archivo: {uploaded_file.name} ({uploaded_file.size / 1024:.1f} KB)")
            
            if st.button("üöÄ Procesar Completo", key="process"):
                if uploaded_file.size > 10 * 1024 * 1024:  # 10MB
                    show_error_message("El archivo es demasiado grande. M√°ximo 10MB.")
                else:
                    with st.spinner("Procesando archivo completo... Esto puede tomar unos minutos."):
                        success, result = process_complete(uploaded_file, fecha_jubilacion, regimen_acceso, sexo)
                    
                    if success:
                        show_success_message("Procesamiento completado exitosamente")
                        
                        # Mostrar resultados principales
                        _show_process_results(result)
                        
                        # Botones de descarga
                        _show_download_buttons(result)
                    else:
                        error_msg = result.get('error', result.get('detail', 'Error desconocido'))
                        show_error_message(f"Error en el procesamiento: {error_msg}")


def show_config_page():
    """Mostrar la p√°gina de configuraci√≥n"""
    st.header("‚öôÔ∏è Configuraci√≥n del Sistema")
    
    show_info_message(
        "Consulta los par√°metros de configuraci√≥n cargados en el sistema para c√°lculos y simulaciones."
    )
    
    if st.button("üîÑ Cargar Configuraci√≥n"):
        with st.spinner("Cargando configuraci√≥n..."):
            success, configs = get_configuration()
        
        if success:
            st.success("‚úÖ Configuraci√≥n cargada correctamente")
            
            # Mostrar cada tipo de configuraci√≥n
            _show_parametros_computo(configs)
            _show_indices_revalorizacion(configs)
            _show_topes_cotizacion(configs)
            
            # Bot√≥n para descargar toda la configuraci√≥n
            json_data = json.dumps(configs, indent=2, ensure_ascii=False)
            st.download_button(
                label="üì• Descargar Configuraci√≥n Completa (JSON)",
                data=json_data,
                file_name=f"configuracion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                key="download_config"
            )
        else:
            error_msg = configs.get('error', 'Error desconocido')
            show_error_message(f"Error cargando configuraci√≥n: {error_msg}")


def _show_process_results(result):
    """Mostrar los resultados del procesamiento"""
    if "estadisticas" in result:
        stats = result["estadisticas"]
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Total Bases", stats.get("total_bases", "N/A"))
        with col2:
            st.metric("Base Reguladora", f"‚Ç¨{stats.get('base_reguladora', 0):.2f}")
        with col3:
            st.metric("Suma Total", f"‚Ç¨{stats.get('suma_total', 0):.2f}")
        with col4:
            st.metric("C√°lculo Usado", result.get("calculo_elegido", "N/A"))
    
    # Informaci√≥n adicional
    st.subheader("üìä Detalles del Procesamiento")
    info_col1, info_col2 = st.columns(2)
    
    with info_col1:
        st.write(f"**Fecha de Jubilaci√≥n:** {result.get('fecha_jubilacion', 'N/A')}")
        st.write(f"**R√©gimen:** {result.get('regimen_acceso', 'N/A')}")
        st.write(f"**Sexo:** {result.get('sexo', 'N/A')}")
    
    with info_col2:
        if "metadata_extraccion" in result:
            metadata = result["metadata_extraccion"]
            st.write(f"**Bases Extra√≠das:** {metadata.get('total_bases_extraidas', 'N/A')}")
            st.write(f"**Empresas:** {metadata.get('total_empresas', 'N/A')}")
            periodo = metadata.get('periodo_extraido', {})
            if periodo:
                st.write(f"**Per√≠odo:** {periodo.get('desde', '')} - {periodo.get('hasta', '')}")


def _show_download_buttons(result):
    """Mostrar botones de descarga"""
    st.subheader("üì• Descargar Resultados")
    
    col_download1, col_download2 = st.columns(2)
    
    with col_download1:
        # Generar Excel
        excel_data = generate_excel_from_process_result(result)
        if excel_data:
            st.download_button(
                label="üìä Descargar Excel Editable",
                data=excel_data,
                file_name=f"bases_cotizacion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key="download_excel",
                help="Excel con pesta√±as separadas y f√≥rmulas din√°micas para edici√≥n"
            )
    
    with col_download2:
        # JSON para desarrollo
        json_data = json.dumps(result, indent=2, ensure_ascii=False)
        st.download_button(
            label="üî® Descargar JSON (Debug)",
            data=json_data,
            file_name=f"procesamiento_completo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json",
            key="download_process",
            help="Archivo JSON completo para desarrollo y depuraci√≥n"
        )


def _show_parametros_computo(configs):
    """Mostrar par√°metros de c√≥mputo"""
    if "parametros" in configs:
        st.subheader("üìä Par√°metros de C√≥mputo")
        params_data = configs["parametros"]["data"]
        
        params = None
        if params_data:
            if "parametros_computo_anual" in params_data:
                params = params_data["parametros_computo_anual"]
            else:
                params = params_data
        
        if params and isinstance(params, dict):
            df_params = []
            for a√±o, datos in params.items():
                if isinstance(datos, dict):
                    df_params.append({
                        "A√±o": a√±o,
                        "Bases Incluidas": datos.get("bases_incluidas", datos.get("numero_bases", "N/A")),
                        "Per√≠odo (meses)": datos.get("periodo_meses", "N/A"),
                        "Divisor Base Reguladora": datos.get("divisor_base_reguladora", datos.get("divisor", "N/A"))
                    })
            
            if df_params:
                df = pd.DataFrame(df_params)
                df = df.sort_values('A√±o', ascending=False)
                st.dataframe(df, use_container_width=True, hide_index=True)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total A√±os", len(df_params))
                with col2:
                    √∫ltimo_a√±o = max(params.keys())
                    st.metric("√öltimo A√±o", √∫ltimo_a√±o)
                with col3:
                    if df_params:
                        primer_a√±o = min(params.keys())
                        st.metric("Primer A√±o", primer_a√±o)
        else:
            st.warning("‚ö†Ô∏è No se pudieron procesar los par√°metros de c√≥mputo")


def _show_indices_revalorizacion(configs):
    """Mostrar √≠ndices de revalorizaci√≥n"""
    if "indices" in configs:
        st.subheader("üìà √çndices de Revalorizaci√≥n")
        indices_data = configs["indices"]["data"]
        
        indices = None
        if indices_data:
            if "indices_revalorizacion" in indices_data:
                indices = indices_data["indices_revalorizacion"]
            else:
                indices = indices_data
        
        if indices and isinstance(indices, dict):
            total_indices = len(indices)
            fechas = list(indices.keys())
            if fechas:
                desde = min(fechas)
                hasta = max(fechas)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total √çndices", total_indices)
                with col2:
                    st.metric("Desde", desde)
                with col3:
                    st.metric("Hasta", hasta)
            
            # Mostrar tabla de √≠ndices
            def sort_key(fecha):
                try:
                    mes, a√±o = fecha.split('/')
                    return (int(a√±o), int(mes))
                except:
                    return (0, 0)
            
            sorted_dates = sorted(indices.keys(), key=sort_key, reverse=True)
            
            df_indices = []
            for fecha in sorted_dates:
                indice = indices[fecha]
                df_indices.append({
                    "Fecha (MM/YYYY)": fecha,
                    "√çndice de Revalorizaci√≥n": f"{indice:.6f}"
                })
            
            if df_indices:
                st.write(f"**üìä Todos los √≠ndices de revalorizaci√≥n ({len(df_indices)} registros):**")
                df = pd.DataFrame(df_indices)
                st.dataframe(df, use_container_width=True, hide_index=True, height=400)
                
                # Estad√≠sticas b√°sicas
                valores = list(indices.values())
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("√çndice Promedio", f"{sum(valores)/len(valores):.6f}")
                with col2:
                    st.metric("√çndice M√°ximo", f"{max(valores):.6f}")
                with col3:
                    st.metric("√çndice M√≠nimo", f"{min(valores):.6f}")
                
                ultimo_fecha = sorted_dates[0]
                ultimo_indice = indices[ultimo_fecha]
                st.info(f"üìÖ **√öltimo √≠ndice disponible**: {ultimo_fecha} - Valor: {ultimo_indice:.6f}")
        else:
            st.warning("‚ö†Ô∏è No se pudieron procesar los √≠ndices de revalorizaci√≥n")


def _show_topes_cotizacion(configs):
    """Mostrar topes de cotizaci√≥n"""
    if "topes" in configs:
        st.subheader("üí∞ Topes de Cotizaci√≥n")
        topes_data = configs["topes"]["data"]
        
        topes = None
        if topes_data:
            if "topes_cotizacion" in topes_data:
                topes = topes_data["topes_cotizacion"]
            else:
                topes = topes_data
        
        if topes and isinstance(topes, dict):
            df_topes = []
            for a√±o, datos in topes.items():
                if isinstance(datos, dict):
                    base_min = datos.get('base_minima_mensual', 0)
                    base_max = datos.get('base_maxima_mensual', 0)
                    df_topes.append({
                        "A√±o": a√±o,
                        "Base M√≠nima Mensual": f"‚Ç¨{base_min:.2f}",
                        "Base M√°xima Mensual": f"‚Ç¨{base_max:.2f}",
                        "Diferencia": f"‚Ç¨{base_max - base_min:.2f}"
                    })
            
            if df_topes:
                df = pd.DataFrame(df_topes)
                df = df.sort_values('A√±o', ascending=False)
                st.dataframe(df, use_container_width=True, hide_index=True)
                
                col1, col2, col3, col4 = st.columns(4)
                
                ultimo_a√±o = max(topes.keys())
                ultimo_datos = topes[ultimo_a√±o]
                
                with col1:
                    st.metric("Total A√±os", len(df_topes))
                with col2:
                    st.metric("√öltimo A√±o", ultimo_a√±o)
                with col3:
                    st.metric("M√≠nima Actual", f"‚Ç¨{ultimo_datos.get('base_minima_mensual', 0):.2f}")
                with col4:
                    st.metric("M√°xima Actual", f"‚Ç¨{ultimo_datos.get('base_maxima_mensual', 0):.2f}")
                
                st.success(f"üéØ **Bases de cotizaci√≥n para {ultimo_a√±o}**: Desde ‚Ç¨{ultimo_datos.get('base_minima_mensual', 0):.2f} hasta ‚Ç¨{ultimo_datos.get('base_maxima_mensual', 0):.2f} mensuales")
        else:
            st.warning("‚ö†Ô∏è No se pudieron procesar los topes de cotizaci√≥n") 